[["index.html", "Gene expression analysis using the DE4Rumi package Chapter 1 Introduction 1.1 Installing DE4Rumi Package", " Gene expression analysis using the DE4Rumi package David Innes 2022-01-06 Chapter 1 Introduction This book is written to explain the use of the DE4Rumi package, developed to automate many of the steps for simple Differential Expression (DE) analysis, but also includes further analyses that were used in my thesis. The DE4Rumi package is basically a set of wrappers for other well-known packages, particularly the DESeq2 package (Love, Anders, and Huber 2021). This package allows substantial customisation, but also uses sensible defaults for beginners. This is also helpful for users who wish to quickly inspect the quality of their RNAseq data with a rough analysis before customising their functions further. This book is targeted at beginner R users, but for specific help on functions please see the help files for each function. This can be accessed by typing ?function_name for the name of the function into the R Console. 1.1 Installing DE4Rumi Package The package is hosted on github and not on an official repository. Therefore, it is considered a development package. To install it you will first need to install the devtools package: install.packages(&quot;devtools&quot;) Then, use the install_github() function to install it by using the following code: devtools::install_github(&quot;davos-i/DE4Rumi&quot;) To view the package on GitHub go to: https://github.com/davos-i/DE4Rumi References "],["project-set-up.html", "Chapter 2 Project set up 2.1 Use R Notebooks 2.2 Setup packages 2.3 A note on file paths 2.4 Figures displayed below code chunks", " Chapter 2 Project set up If you have already set up your R Project, please proceed to next chapter. This package works best when using a Project within the RStudio IDE. Using projects has many benefits as multiple related files are all stored in one directory, and this becomes the working directory which allows easy use of relative pathways. See https://support.rstudio.com/hc/en-us/articles/200526207-Using-RStudio-Projects. 2.1 Use R Notebooks It is also encouraged that R Notebooks are used (file extension .Rmd) and these should be saved in the top level of the project folder. When you save a Notebook, a .html file is generated in the same folder as the .Rmd file which shows the output of scripts below each chunk of code. This will help you keep track of your work and the .html reports make it quick and easy to view the results outside of RStudio. In fact, this book is written in a very similar way to R Notebooks, and you will see why this is so handy in the next chapters. The output will appear differently in this book, particularly related to the lack of colour in the messages that the functions produce. When using these functions within RStudio the output will be clearer. It is also a good idea to keep the output messages from a function that takes a long time and create a new code chunk below it to do further tasks. If you run an additional line of code in the existing code chunk it will wipe the output on the screen. If you are a beginner, try opening a new R Notebook by clicking File -&gt; New File -&gt; R Notebook and it will bring up some more introductory details if you are unfamiliar with these. R Notebooks are a special type of R Markdown file, and shouldnt be confused. 2.2 Setup packages The first code chunk of your R Notebook should be labelled setup, by using {r setup} at the start of code chunk. Everything between the two sets of three backticks (```) is executed as R code, and everything outside of these is rendered as text. By labelling the first code chunk as setup, RStudio will execute this code chunk before running any other code if it has not already done so in the current session. This is particularly useful for loading your R packages, which are required once per session. At a minimum it is suggested that you load library(tidyverse), as well as the DE4Rumi package: library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.6 v dplyr 1.0.7 ## v tidyr 1.1.4 v stringr 1.4.0 ## v readr 2.1.0 v forcats 0.5.1 ## Warning: package &#39;tibble&#39; was built under R version 4.1.2 ## Warning: package &#39;tidyr&#39; was built under R version 4.1.2 ## Warning: package &#39;readr&#39; was built under R version 4.1.2 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(DE4Rumi) ## Loading required package: S4Vectors ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following object is masked from &#39;package:tidyr&#39;: ## ## expand ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname 2.3 A note on file paths For example, DE4Rumi has the ability to export plots and tables, and it will default to the pathway file = \"./outputs/\". Although the \"./\" is not necessary, it is used to remind the user that the output folder is located in the top level. Keep in mind that it is possible to use \"../\" to go up 2 levels, if needed. When writing a file path to import or export a file, you can press the Tab button on your keyboard after you type \"./\", and it will display a list of files and folders. Tab complete is useful for typing long variable or function names too. 2.4 Figures displayed below code chunks Figures will also be displayed below the code chunks for some functions in DE4Rumi. If multiple figures are generated by a function, all of them will be displayed below the code chunk and will be visible one after the other in the .html output. Various controls are available to changing the size of the figures and how they look. For example, figure width can be set to 8 or 10 for larger plots by adding {r fig.width = 10} at the start of code chunk. To view plots in the Plots window inside RStudio, copy and paste the code that generates the plot into the Console directly (keyboard shortcut Ctrl + 2) and run it. This will let you Zoom and Export directly if needed. Other options for exporting plots exist in some functions in DE4Rumi. "],["importing-data.html", "Chapter 3 Importing Data 3.1 Note on importing files 3.2 Import count data 3.3 Import column metadata 3.4 Rename columns to match required format 3.5 Check data", " Chapter 3 Importing Data DE4Rumi takes 2 files as input: Counts matrix/table A table with metadata for each sample 3.1 Note on importing files There are many functions used to import data into R, but it is suggested that the fread function from the data.table packages is used (Dowle and Srinivasan 2021). Not only is it much faster than alternatives, it also automatically detects file types and column separators (e.g. tab or comma) for most files. If you do not use data.table much, then you might not want to load it into your session and instead just name the package each time you use fread by typing data.table::fread(file = \"./testfile.csv\"). 3.2 Import count data Count data refers to data generated by Next Generation Sequencing technologies, such as RNAseq, and represents how abundant a genes mRNA was in the sample. These count tables are produced from processing .fastq files with an RNAseq pipeline, which is not discussed here. For example, the data used in this example was generated with a bioinformatics workflow consisting of FastQC -&gt; trimmomatic -&gt; STAR Aligner -&gt; featureCounts on htt://usegalaxy.org.au. Visit https://davos-i.github.io/Galaxy_RNASeq_Book/ for more details. The counts matrix/table must be imported with the first column titled gene_ensembl and all other columns named as the respective individual samples. Each row contains the counts for each gene across all samples, and the first column must contain Ensembl IDs e.g. ENSBTAG00000000005. cts_all &lt;- data.table::fread( file = &quot;./Inputs/counts_matrix_bstCattle.txt&quot;) #view first 10 rows of first 5 columns head(cts_all[,1:5]) ## gene_ensembl VMH_15 VMH_13 VMH_12 VMH_11 ## 1: ENSBTAG00000000005 1260 705 776 561 ## 2: ENSBTAG00000000008 2 0 0 0 ## 3: ENSBTAG00000000009 83 51 81 71 ## 4: ENSBTAG00000000010 1084 619 674 462 ## 5: ENSBTAG00000000011 230 179 237 170 ## 6: ENSBTAG00000000012 380 287 293 227 3.2.1 Check structure of data Its often a good idea to check the structure of a table after it is imported, particularly to check that columns are of the correct type/class. E.g. are numbers treated as numbers (int) or are they characters (chr) that need converting? Fortunately data.table::fread guesses these correctly most of the time. #showing first 15 columns to save space str(cts_all[,1:15]) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 27607 obs. of 15 variables: ## $ gene_ensembl: chr &quot;ENSBTAG00000000005&quot; &quot;ENSBTAG00000000008&quot; &quot;ENSBTAG00000000009&quot; &quot;ENSBTAG00000000010&quot; ... ## $ VMH_15 : int 1260 2 83 1084 230 380 1124 1507 593 10 ... ## $ VMH_13 : int 705 0 51 619 179 287 962 1050 200 12 ... ## $ VMH_12 : int 776 0 81 674 237 293 1050 1249 377 5 ... ## $ VMH_11 : int 561 0 71 462 170 227 712 856 206 10 ... ## $ VMH_10 : int 977 0 53 733 221 317 853 1028 419 3 ... ## $ VMH_09 : int 803 3 48 623 198 314 939 1049 381 17 ... ## $ VMH_08 : int 847 0 45 519 227 243 815 937 273 5 ... ## $ VMH_07 : int 893 2 50 695 186 243 718 1164 433 12 ... ## $ VMH_06 : int 793 3 76 563 167 267 838 859 286 9 ... ## $ VMH_05 : int 703 2 54 720 207 183 613 1189 425 9 ... ## $ VMH_04 : int 529 1 51 445 142 190 721 704 180 4 ... ## $ VMH_03 : int 669 3 55 550 154 225 567 893 330 3 ... ## $ VMH_02 : int 614 0 50 508 170 244 726 839 321 4 ... ## $ VMH_01 : int 693 3 29 613 154 246 607 910 471 4 ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; 3.3 Import column metadata DE4Rumi automates many processes that would otherwise require manual input to set names of treatments and pairwise comparisons, etc. To do this, it relies on the sample names being in a specific format: Tissue_Region_ID__Treatment or in R: paste0(Tissue_Region, \"_\", ID, \"__\", Treatment) Note that there are two underscores between ID and Treatment coldata &lt;- data.table::fread(&quot;./Inputs/colData_all_regions.csv&quot;) #Turn animal ID&#39;s into characters (not integers), with leading 0&#39;s and then #make sample_names column coldata &lt;- coldata %&gt;% mutate(ID = as.character(ID) %&gt;% stringr::str_pad(3, pad = &quot;0&quot;), sample_names = paste0(Tissue_Region, &quot;_&quot;, ID, &quot;__&quot;, Treatment)) head(coldata) ## Name Treatment Tissue_Region ID sample_names ## 1: ARC_01 LR ARC 004 ARC_004__LR ## 2: ARC_02 MAL ARC 008 ARC_008__MAL ## 3: ARC_03 LR ARC 022 ARC_022__LR ## 4: ARC_04 LR ARC 032 ARC_032__LR ## 5: ARC_05 LAL ARC 052 ARC_052__LAL ## 6: ARC_06 MAL ARC 066 ARC_066__MAL 3.4 Rename columns to match required format Each set of data will be different, and it is unlikely that the column names of the counts table match the required format for use in this package. Therefore, there users will normally have to rename these columns. Below is a quick way to do it. You will notice that some names dont look correct. This will be explained further in next step. # Create new names for cts columns ## This step will normally require customisation for each new dataset ## This step is important to make sure the new names are in teh same order as the old names. temp_colnames_calc &lt;- colnames(cts_all)[-1] %&gt;% #Take the column names minus the first one as_tibble() %&gt;% #convert it to a tibble dplyr::rename(Name = value) %&gt;% #rename the &#39;value&#39; column which is generated in previous step to be &#39;Name&#39; left_join(coldata, by = &quot;Name&quot;) #add the coldata table to it, by matching on the columns &quot;Name&quot; # add new column names ## Take the column named &#39;sample_names&quot; and add them as the new column names of the counts table, starting after the first column colnames(cts_all)[-1] &lt;- temp_colnames_calc[[&quot;sample_names&quot;]] ## Name the first column &#39;gene_ensembl&#39;, as required. colnames(cts_all)[1] &lt;- &quot;gene_ensembl&quot; # Check column names of counts table colnames(cts_all) ## [1] &quot;gene_ensembl&quot; &quot;VMH_193__LAL&quot; &quot;VMH_184__LAL&quot; &quot;VMH_149__LR&quot; &quot;VMH_136__LAL&quot; ## [6] &quot;VMH_112__LAL&quot; &quot;VMH_096__MAL&quot; &quot;VMH_088__MAL&quot; &quot;VMH_079__LR&quot; &quot;VMH_066__MAL&quot; ## [11] &quot;VMH_052__LAL&quot; &quot;VMH_032__LR&quot; &quot;VMH_022__LR&quot; &quot;VMH_008__MAL&quot; &quot;VMH_004__LR&quot; ## [16] &quot;LHA_193__LAL&quot; &quot;LHA_186__MAL&quot; &quot;LHA_184__LAL&quot; &quot;LHA_149__LR&quot; &quot;LHA_136__LAL&quot; ## [21] &quot;LHA_112__LAL&quot; &quot;LHA_096__MAL&quot; &quot;LHA_088__MAL&quot; &quot;LHA_079__LR&quot; &quot;LHA_066__MAL&quot; ## [26] &quot;LHA_052__LAL&quot; &quot;LHA_032__LR&quot; &quot;LHA_022__LR&quot; &quot;LHA_008__MAL&quot; &quot;LHA_004__LR&quot; ## [31] &quot;ARC_193__LAL&quot; &quot;ARC_186__MAL&quot; &quot;ARC_184__LAL&quot; &quot;ARC_149__LR&quot; &quot;ARC_136__LAL&quot; ## [36] &quot;ARC_112__LAL&quot; &quot;ARC_096__MAL&quot; &quot;ARC_088__MAL&quot; &quot;ARC_079__LR&quot; &quot;ARC_066__MAL&quot; ## [41] &quot;ARC_052__LAL&quot; &quot;ARC_032__LR&quot; &quot;ARC_022__LR&quot; &quot;ARC_008__MAL&quot; &quot;ARC_004__LR&quot; ## [46] &quot;VMH_186__MAL&quot; &quot;RUM_066__MAL&quot; &quot;ABO_052__LAL&quot; &quot;DUO_079__LR&quot; &quot;DUO_186__MAL&quot; ## [51] &quot;ABO_149__LR&quot; &quot;ABO_186__MAL&quot; &quot;RUM_112__LAL&quot; &quot;DUO_149__LR&quot; &quot;DUO_004__LR&quot; ## [56] &quot;ABO_088__MAL&quot; &quot;ABO_022__LR&quot; &quot;DUO_066__MAL&quot; &quot;RUM_079__LR&quot; &quot;ABO_032__LR&quot; ## [61] &quot;ABO_184__LAL&quot; &quot;DUO_193__LAL&quot; &quot;RUM_136__LAL&quot; &quot;DUO_184__LAL&quot; &quot;ABO_193__LAL&quot; ## [66] &quot;RUM_004__LR&quot; &quot;ABO_008__MAL&quot; &quot;ABO_096__MAL&quot; &quot;ABO_112__LAL&quot; &quot;RUM_186__MAL&quot; ## [71] &quot;DUO_052__LAL&quot; &quot;ABO_079__LR&quot; &quot;RUM_032__LR&quot; &quot;DUO_088__MAL&quot; &quot;ABO_004__LR&quot; ## [76] &quot;RUM_008__MAL&quot; &quot;RUM_096__MAL&quot; &quot;DUO_022__LR&quot; &quot;DUO_112__LAL&quot; &quot;RUM_149__LR&quot; ## [81] &quot;RUM_193__LAL&quot; &quot;ABO_136__LAL&quot; &quot;ABO_066__MAL&quot; &quot;RUM_052__LAL&quot; &quot;DUO_032__LR&quot; ## [86] &quot;RUM_088__MAL&quot; &quot;DUO_008__MAL&quot; &quot;DUO_096__MAL&quot; &quot;RUM_022__LR&quot; &quot;DUO_136__LAL&quot; ## [91] &quot;RUM_184__LAL&quot; &quot;LIV_30&quot; &quot;LIV_193__LAL&quot; &quot;LIV_186__MAL&quot; &quot;LIV_184__LAL&quot; ## [96] &quot;LIV_149__LR&quot; &quot;LIV_25&quot; &quot;LIV_24&quot; &quot;LIV_136__LAL&quot; &quot;LIV_22&quot; ## [101] &quot;LIV_112__LAL&quot; &quot;LIV_20&quot; &quot;LIV_19&quot; &quot;LIV_18&quot; &quot;LIV_096__MAL&quot; ## [106] &quot;LIV_088__MAL&quot; &quot;LIV_079__LR&quot; &quot;LIV_066__MAL&quot; &quot;LIV_13&quot; &quot;LIV_052__LAL&quot; ## [111] &quot;LIV_11&quot; &quot;LIV_10&quot; &quot;LIV_032__LR&quot; &quot;LIV_08&quot; &quot;LIV_022__LR&quot; ## [116] &quot;LIV_06&quot; &quot;LIV_05&quot; &quot;LIV_04&quot; &quot;LIV_03&quot; &quot;LIV_008__MAL&quot; ## [121] &quot;LIV_004__LR&quot; 3.5 Check data The DE4Rumi package includes some helper functions to ensure that the column data and the counts matrix are formatted correctly. In the previous step, there were some unusual looking names. This is because there is coldata information for samples that were not included in this analysis. This might be common if you have sequenced a subset of samples from a larger experiment. This is not a problem, and the following functions will handle it appropriately. The first check we run is the check_count_matrix() function. It takes the counts data, the column data and the name of the column in the column data that contains the sample names (to match to the counts data). If there is an error, it will tell you more details in the Console of R Studio (at bottom of screen). cts_filtered &lt;- check_count_matrix(count_data = cts_all, colData = coldata, column_with_col_names = sample_names) In this case there was some checks that did not pass, but there was also an error which terminated the function. The critical error here was: ## FAIL: colData has entries in column_with_col_names that do not match a column in count_data. Potentially missing data? ## Entries in colData with no matching counts data: LIV_999__NO ## Error in check_count_matrix(count_data = cts_all, colData = coldata, column_with_col_names = sample_names) : ## Checks terminated. See notes in Console. Run subset_colData() and try again. In the console it listed the Entries in colData with no matching counts data: LIV_999__NO which means that there is an extra sample in the counts data. Users may wish to address this manually by re-importing a correct coldata file. Otherwise, the DE4Rumi also contains the function subset_colData() which can automatically remove the entry. Notice that the function outputs the new coldata, and we have assigned it to the same name: coldata. coldata &lt;- subset_colData(count_data = cts_all, colData = coldata, column_with_col_names = sample_names) ## Entries in colData with no matching counts data: LIV_999__NO ## Dimensions before filtering: 106 5 ## Dimensions after filtering: 105 5 The output above shows that the missing sample has been removed. Next, we re-run the check_count_matrix() function. See that it also shows the extra coldata entries that we noticed above. Also notice that this function outputs a cts-filtered object which has been filtered, meaning it is ready to use downstream. cts_filtered &lt;- check_count_matrix(count_data = cts_all, colData = coldata, column_with_col_names = sample_names) ## FAIL: Not all columns in count_data have matching data in colData ## Missing samples: ## [1] &quot;LIV_30&quot; &quot;LIV_25&quot; &quot;LIV_24&quot; &quot;LIV_22&quot; &quot;LIV_20&quot; &quot;LIV_19&quot; &quot;LIV_18&quot; &quot;LIV_13&quot; ## [9] &quot;LIV_11&quot; &quot;LIV_10&quot; &quot;LIV_08&quot; &quot;LIV_06&quot; &quot;LIV_05&quot; &quot;LIV_04&quot; &quot;LIV_03&quot; ## Function will now output count_data without these columns!! ## PASS: Rownames not detected ## PASS: First column name is &#39;gene_ensembl&#39; ## ## Dimensions of raw counts dataset BEFORE sorting: ## genes: 27607 samples: 120 ## ## Number of samples in colData: 105 ## ## Dimensions of raw counts dataset AFTER sorting: ## genes: 27607 samples: 105 References "],["prepare-data.html", "Chapter 4 Prepare Data 4.1 Get human equivalant gene names 4.2 Prepare summarized experiment object", " Chapter 4 Prepare Data 4.1 Get human equivalant gene names This step uses the gProfiler API package (Kolberg and Raudvere 2021) to create an annotation list with human equivalant gene names instead of ensembl IDs. This is useful for visualiastion and interpreation of data, but all analysis still uses the ensembl ID as these remain unique to each row of the data. gene_annot &lt;- annotate_gene_ensembl(cts_filtered, organism = &quot;btaurus&quot;, base_URL = &quot;http://biit.cs.ut.ee/gprofiler_archive3/e100_eg47_p14&quot;) ## g:Profiler Version URL: http://biit.cs.ut.ee/gprofiler_archive3/e100_eg47_p14 ## Using organism: btaurus ## [34mImportant - this produces duplicate gene names from annotation - however gene_ensembl remain unique. ## This is why it&#39;s important to use gene_ensembl for all tasks and annotate output at end.[39m ## [1] &quot;duplicate genes in annotation: 1976&quot; 4.2 Prepare summarized experiment object After the data is imported, it must be prepared in a SummarizedExperiment object. See https://doi.org/doi:10.18129/B9.bioc.SummarizedExperiment for more details. Basically it is an object class that stores all of the RNAseq data, annotations and column data alongside each other, and is subsettable. seq_data &lt;- make_summarized_experiment_object(counts_data = cts_filtered, gene_annotations = gene_annot, colData = coldata) References "],["de-analysis.html", "Chapter 5 DE Analysis 5.1 Generate DE results", " Chapter 5 DE Analysis 5.1 Generate DE results The top_level_groups argument can be filled manually e.g. c(ARC, LIV) Otherwise, use a quick function to get all possible options and parse that: Get all unique entries in Tissue_Region and assign to variable groups_for_DE &lt;- seq_data$Tissue_Region %&gt;% unique() #View output to check print(groups_for_DE) ## [1] &quot;ARC&quot; &quot;LHA&quot; &quot;VMH&quot; &quot;ABO&quot; &quot;DUO&quot; &quot;RUM&quot; &quot;LIV&quot; Notice we use top_level_groups = groups_for_DE. Other arguments are also specific to this dataset. To see details of all of these arguments type ?auto_generate_DE_results into the Console (at bottom of screen). This is the main step where DESeq2 is used and can take a while depending on how many samples there are. This function will iterate over each level of top_level_groups, and will automatically detect pairwise comparisons within each top_level_groups. This is determined based on the column data and is specified by the names given to the funciton. See ?auto_generate_DE_results for specific details. It also is set to export a lot of output files to the directory \"./Outputs/\". This can be turned off. DE_out &lt;- auto_generate_DE_results(se_data = seq_data, top_level_groups = groups_for_DE, top_level_colname = Tissue_Region, sample_colname = sample_names, samples_to_remove = NA, DESeq2_formula_design = ~Treatment, rowSums_filter = 10, #for dds filtering results_contrast_factor = Treatment, results_combinations = NA, use_IHW_filtering = TRUE, alpha = 0.05, gene_annotations = gene_annot, export_tables = TRUE, export_dir = &quot;./Outputs/&quot;, whole_data_normalisation = FALSE) ## ## ## ******************* Start of - ARC ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 19758 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 1, 0.0051% ## LFC &lt; 0 (down) : 7, 0.035% ## outliers [1] : 36, 0.18% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 19758 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 44, 0.22% ## LFC &lt; 0 (down) : 80, 0.4% ## outliers [1] : 36, 0.18% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 19758 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 55, 0.28% ## LFC &lt; 0 (down) : 124, 0.63% ## outliers [1] : 36, 0.18% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - ARC ******************* ## ## ## ******************* Start of - LHA ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 18718 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 2, 0.011% ## LFC &lt; 0 (down) : 2, 0.011% ## outliers [1] : 104, 0.56% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 18718 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 0, 0% ## LFC &lt; 0 (down) : 0, 0% ## outliers [1] : 104, 0.56% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 18718 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 1, 0.0053% ## LFC &lt; 0 (down) : 1, 0.0053% ## outliers [1] : 104, 0.56% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - LHA ******************* ## ## ## ******************* Start of - VMH ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 19185 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 0, 0% ## LFC &lt; 0 (down) : 1, 0.0052% ## outliers [1] : 40, 0.21% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 19185 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 4, 0.021% ## LFC &lt; 0 (down) : 7, 0.036% ## outliers [1] : 40, 0.21% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 19185 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 1, 0.0052% ## LFC &lt; 0 (down) : 4, 0.021% ## outliers [1] : 40, 0.21% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - VMH ******************* ## ## ## ******************* Start of - ABO ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 18134 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 2, 0.011% ## LFC &lt; 0 (down) : 0, 0% ## outliers [1] : 230, 1.3% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 18134 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 9, 0.05% ## LFC &lt; 0 (down) : 10, 0.055% ## outliers [1] : 230, 1.3% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 18134 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 13, 0.072% ## LFC &lt; 0 (down) : 8, 0.044% ## outliers [1] : 230, 1.3% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - ABO ******************* ## ## ## ******************* Start of - DUO ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 18958 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 466, 2.5% ## LFC &lt; 0 (down) : 323, 1.7% ## outliers [1] : 59, 0.31% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 18958 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 36, 0.19% ## LFC &lt; 0 (down) : 39, 0.21% ## outliers [1] : 59, 0.31% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 18958 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 64, 0.34% ## LFC &lt; 0 (down) : 146, 0.77% ## outliers [1] : 59, 0.31% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - DUO ******************* ## ## ## ******************* Start of - RUM ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 17655 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 207, 1.2% ## LFC &lt; 0 (down) : 280, 1.6% ## outliers [1] : 139, 0.79% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 17655 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 25, 0.14% ## LFC &lt; 0 (down) : 18, 0.1% ## outliers [1] : 139, 0.79% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 17655 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 155, 0.88% ## LFC &lt; 0 (down) : 205, 1.2% ## outliers [1] : 139, 0.79% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - RUM ******************* ## ## ## ******************* Start of - LIV ******************* ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## Generating pairwise DESeq2 results... ## [1] &quot;Contrast levels: LR, MAL, LAL&quot; ## ## ## log2 fold change (MLE): Treatment LR vs MAL ## ## out of 17765 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 28, 0.16% ## LFC &lt; 0 (down) : 34, 0.19% ## outliers [1] : 43, 0.24% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment LR vs LAL ## ## out of 17765 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 99, 0.56% ## LFC &lt; 0 (down) : 189, 1.1% ## outliers [1] : 43, 0.24% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## ## ## log2 fold change (MLE): Treatment MAL vs LAL ## ## out of 17765 with nonzero total read count ## adjusted p-value &lt; 0.05 ## LFC &gt; 0 (up) : 248, 1.4% ## LFC &lt; 0 (down) : 468, 2.6% ## outliers [1] : 43, 0.24% ## [1] see &#39;cooksCutoff&#39; argument of ?results ## see metadata(res)$ihwResult on hypothesis weighting ## Results generated. ## Plotting MA plots (default DESeq2 style for QC)... ## Finished MA plots. ## Plotting p value histograms (for QC)... ## Finished plotting p value histograms. ## ./Outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./Outputs/ ## PIF calculations - Preparing normalised data... ## PIF calculations - Preparing normalised data...COMPLETE ## PIF calculations - Calculating PIF data... ## PIF_LRvsMAL ## PIF_LRvsLAL ## PIF_MALvsLAL ## PIF calculations - Calculating PIF data...COMPLETE ## ./Outputs/ Directory exists ## PIF tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## PIF calculations - END ## ./Outputs/ Directory exists ## DE tables exported to an .xlsx file in the sub-directory: ./Outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END of - LIV ******************* #View sructure of DE_out object str(DE_out, max.level = 2) ## List of 7 ## $ ARC_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ LHA_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ VMH_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ ABO_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ DUO_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ RUM_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 ## $ LIV_DESeq2_Output:List of 8 ## ..$ dds_wald_object :Formal class &#39;DESeqDataSet&#39; [package &quot;DESeq2&quot;] with 8 slots ## ..$ boxplot_cooks_distance:List of 9 ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;gg&quot; &quot;ggplot&quot; ## ..$ DESeq2_res_object :List of 3 ## ..$ pairwise_plots :List of 2 ## ..$ overall_plots :List of 3 ## ..$ normalised_data :List of 2 ## ..$ PIF :List of 3 ## ..$ DE_by_PIF_df :List of 3 "],["access-results.html", "Chapter 6 6. Access results 6.1 Boxplot of cooks distances 6.2 PCA 6.3 Heatmap 6.4 Sample distances 6.5 Remove outliers if needed and re-run steps DE Analysis", " Chapter 6 6. Access results The results are all stored in the list object outputted from the function. In this case we named it DE_out. The following functions are helper functions to allow you to extract the results for viewing. If you are familiar with lists in R you may also be comfortable looking through the DE_out manually. The following results are most important for determining the quality of the analysis. Interpretation is beyond the scope of this book, but please read the DESeq2 Vignette carefully as there is substantial amounts of information and it is kept updated by the package authors: http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html. The DE4Rumi packages includes many GET_ functions, all with the purpose of accessing different results from the DE output: GET_boxplot_cooks_distance GET_dds_wald_objects GET_DE_by_PIF_df GET_DESeq2_res_object GET_normalised_data GET_overall_plots GET_pairwise_plots GET_PIF_df See their help pages for detailed information. 6.1 Boxplot of cooks distances This has own function compared to others below. This is useful for both DE comparisons and when whole data normalisation has been run. boxplots &lt;- GET_boxplot_cooks_distance(auto_DE_output = DE_out) Figure 6.1: Example boxplot output 6.2 PCA PCA_plots &lt;- GET_overall_plots(auto_DE_output = DE_out, type = &quot;PCA&quot;) Figure 6.2: Example PCA output 6.3 Heatmap heatmaps &lt;- GET_overall_plots(auto_DE_output = DE_out, type = &quot;heatmap&quot;) Figure 6.3: Example Heatmap output 6.4 Sample distances sample_distances &lt;- GET_overall_plots(auto_DE_output = DE_out, type = &quot;sample_distances&quot;) Figure 6.4: Example sample distances output 6.5 Remove outliers if needed and re-run steps DE Analysis If you find outliers in the samples, they should be removed and the whole DE Analysis on this page re-run before proceeding. "],["functional-enrichment-analysis.html", "Chapter 7 Functional enrichment analysis", " Chapter 7 Functional enrichment analysis This function utilises gProfiler as well, but this time to retrieve a functional enrichment analysis, similar to using their website: https://biit.cs.ut.ee/gprofiler/gost There are various customisations that are possible, including automatically splitting the DE genes into positive and negative fold change prior to searching the database. It can also export tables for easier viewing. This function takes the DE_results_objects from the DE output list, accessed via GET_DESeq2_res_object(). This can take a while as it connects to an online server to conduct the search. #DE_results_objects from DE_out DE_results_objects &lt;- GET_DESeq2_res_object(auto_DE_output = DE_out) #view names names(DE_results_objects) ## [1] &quot;ARC_DESeq2_Output.LR vs MAL&quot; &quot;ARC_DESeq2_Output.LR vs LAL&quot; ## [3] &quot;ARC_DESeq2_Output.MAL vs LAL&quot; &quot;LHA_DESeq2_Output.LR vs MAL&quot; ## [5] &quot;LHA_DESeq2_Output.LR vs LAL&quot; &quot;LHA_DESeq2_Output.MAL vs LAL&quot; ## [7] &quot;VMH_DESeq2_Output.LR vs MAL&quot; &quot;VMH_DESeq2_Output.LR vs LAL&quot; ## [9] &quot;VMH_DESeq2_Output.MAL vs LAL&quot; &quot;ABO_DESeq2_Output.LR vs MAL&quot; ## [11] &quot;ABO_DESeq2_Output.LR vs LAL&quot; &quot;ABO_DESeq2_Output.MAL vs LAL&quot; ## [13] &quot;DUO_DESeq2_Output.LR vs MAL&quot; &quot;DUO_DESeq2_Output.LR vs LAL&quot; ## [15] &quot;DUO_DESeq2_Output.MAL vs LAL&quot; &quot;RUM_DESeq2_Output.LR vs MAL&quot; ## [17] &quot;RUM_DESeq2_Output.LR vs LAL&quot; &quot;RUM_DESeq2_Output.MAL vs LAL&quot; ## [19] &quot;LIV_DESeq2_Output.LR vs MAL&quot; &quot;LIV_DESeq2_Output.LR vs LAL&quot; ## [21] &quot;LIV_DESeq2_Output.MAL vs LAL&quot; gprofiler_output &lt;- enrich_DE(list_DE_obj = DE_results_objects, sig_thresh = 0.05, log2_thresh = 0, split_by_pos_neg = TRUE, gene_annotations = gene_annot, organism = &quot;btaurus&quot;, base_URL = &quot;http://biit.cs.ut.ee/gprofiler_archive3/e100_eg47_p14&quot;, export_tables = TRUE, export_dir = &quot;./outputs/gProfiler/&quot;) ## Filtering data... ## Filtering data... COMPLETE ## g:Profiler Version URL: http://biit.cs.ut.ee/gprofiler_archive3/e100_eg47_p14 ## Running gprofiler2::gost()... ## Running gprofiler2::gost()... COMPLETE ## Reformatting dataframe... ## Reformatting dataframe... COMPLETE ## Split and sort dataframe... ## Split and sort dataframe... COMPLETE ## Directory created: ./outputs/gProfiler/ ## gProfiler functional enrichment tables exported to an .xlsx file in the sub-directory: ./outputs/gProfiler/ "],["ma-plots.html", "Chapter 8 MA Plots", " Chapter 8 MA Plots MA plots are very useful in interpretation of the data as they visualise genes that are highly abundant and most different between two conditions/treatments. These MA plots are automatically labelled with gene names of the outermost genes on the plot. It also identifies PIF and DE genes. In fact, the PIF dataset is used as input to this function as it contains all genes ranked on PIF, as well as p values for filtering DE genes. Note that this function is a wrapper to the plot_custom_MA() function within DE4Rumi and any additional arguments from plot_custom_MA can also be parsed to the auto_plot_multi_MA function. This allows for significant customisation, although the default settings are likely sufficient. For example, tiff_width= and tiff_height= are valid arguments but leaving these out means their default values are used. In addition, the thresholds for DE and PIF can be customised. See ?plot_custom_MA. #access PIF data PIF_dataframes &lt;- DE_out %&gt;% purrr::map(&quot;PIF&quot;) %&gt;% unlist(recursive = FALSE) MA_plots_out &lt;- auto_plot_multi_MA(PIF_list = PIF_dataframes, list_plot_titles = NA, export_TIFFs = TRUE, export_pdf = TRUE, pdf_height = 140, pdf_width = 220, export_dir = &quot;./outputs/MA_plots/&quot;) MA_plots_out Figure 8.1: Example MA plot. "],["whole-dataset-normalisation.html", "Chapter 9 Whole dataset normalisation 9.1 View Cooks distance boxplot for whole dataset", " Chapter 9 Whole dataset normalisation After the DE analysis is complete, it is important to normalise the data across the entire data set for downstream co-expression analysis (PCIT) and other analyses. This uses the same auto_generate_DE_results() function but with whole_dataset_normalisation = TRUE. The example below shows the minimum information the function needs to run. full_norm &lt;- auto_generate_DE_results(se_data = seq_data, top_level_colname = Tissue_Region, sample_colname = sample_names, samples_to_remove = NA, DESeq2_formula_design = ~Treatment, gene_annotations = gene_annot, export_tables = TRUE, export_dir = &quot;./outputs/&quot;, whole_data_normalisation = TRUE) ## Whole data normalisation selected. No pairwise results will be generated. ## renaming the first element in assays to &#39;counts&#39; ## Warning in DESeq2::DESeqDataSet(se_data0, design = DESeq2_formula_design): some ## variables in design formula are characters, converting to factors ## Beginning DESeq analysis... ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## -- replacing outliers and refitting for 398 genes ## -- DESeq argument &#39;minReplicatesForReplace&#39; = 6 ## -- original counts are preserved in counts(dds) ## estimating dispersions ## fitting model and testing ## Completed DESeq analysis. ## Plotting cooks distance... ## Cooks distance plot complete. ## ./outputs/ Directory exists ## Normalised tables exported to the sub-directory: ./outputs/ ## Preparing data for output... ## List output succesfully generated. ## ## ## ******************* END ******************* 9.1 View Cooks distance boxplot for whole dataset boxplots2 &lt;- GET_boxplot_cooks_distance(auto_DE_output = full_norm) ## $Whole_data_normalisation_output "],["rif-analysis.html", "Chapter 10 RIF Analysis", " Chapter 10 RIF Analysis One of the additional steps in the pipeline is to calculate Regulatory Impact Factor (RIF) scores for either transcription factors (TF) or any gene of interest. Genes that are not DE may still have a regulatory role that can be inferred from these abstract calculations. See https://doi.org/10.1093/bioinformatics/btq051 By setting the TFs = NA and all_genes_as_TF = TRUE we are telling the function to use all genes as possible TF. Otherwise, we could set all_genes_as_TF = FALSE and then manually provide a list of TFs. For example, one might download the list of TF off the animalTFDB (http://bioinfo.life.hust.edu.cn/AnimalTFDB/) to focus on. DE_dataframes_list &lt;- DE_out %&gt;% purrr::map(&quot;DE_sig_PIF_df&quot;) vst_norm_data &lt;- GET_normalised_data(full_norm, vst_or_log2 = &quot;VST&quot;)[[1]] RIF_output &lt;- calculate_RIF(DE_output = DE_out, TFs = NA, norm_exp_data = vst_norm_data, gene_annotations = gene_annot, all_genes_as_TF = TRUE, colData = SummarizedExperiment::colData(seq_data) , results_contrast_factor = Treatment, samples_colname = sample_names) ## ## ## ******************* Start of - ARC ******************* ## ## ARC - LR vs MAL ## Number of target genes: 8 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ARC_004__LR, ARC_022__LR, ARC_032__LR, ARC_079__LR, ARC_149__LR ## names of condition 2: ARC_008__MAL, ARC_066__MAL, ARC_088__MAL, ARC_096__MAL, ARC_186__MAL ## Number of excluded genes (within condition SD == 0): 1658 ## Registered S3 method overwritten by &#39;GGally&#39;: ## method from ## +.gg ggplot2 ## ## Registered S3 method overwritten by &#39;ggnetwork&#39;: ## method from ## fortify.igraph ggtree ## Running RIF... ## Running RIF... COMPLETE ## ## ARC - LR vs LAL ## Number of target genes: 124 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ARC_004__LR, ARC_022__LR, ARC_032__LR, ARC_079__LR, ARC_149__LR ## names of condition 2: ARC_052__LAL, ARC_112__LAL, ARC_136__LAL, ARC_184__LAL, ARC_193__LAL ## Number of excluded genes (within condition SD == 0): 1625 ## Running RIF... ## Running RIF... COMPLETE ## ## ARC - MAL vs LAL ## Number of target genes: 179 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ARC_008__MAL, ARC_066__MAL, ARC_088__MAL, ARC_096__MAL, ARC_186__MAL ## names of condition 2: ARC_052__LAL, ARC_112__LAL, ARC_136__LAL, ARC_184__LAL, ARC_193__LAL ## Number of excluded genes (within condition SD == 0): 1642 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - ARC ******************* ## ## ## ******************* Start of - LHA ******************* ## ## LHA - LR vs MAL ## Number of target genes: 4 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: LHA_004__LR, LHA_022__LR, LHA_032__LR, LHA_079__LR, LHA_149__LR ## names of condition 2: LHA_008__MAL, LHA_066__MAL, LHA_088__MAL, LHA_096__MAL, LHA_186__MAL ## Number of excluded genes (within condition SD == 0): 2600 ## Running RIF... ## Running RIF... COMPLETE ## ## LHA - LR vs LAL ## Did not run RIF -- Number of target genes: 0 ## ## LHA - MAL vs LAL ## Number of target genes: 2 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: LHA_008__MAL, LHA_066__MAL, LHA_088__MAL, LHA_096__MAL, LHA_186__MAL ## names of condition 2: LHA_052__LAL, LHA_112__LAL, LHA_136__LAL, LHA_184__LAL, LHA_193__LAL ## Number of excluded genes (within condition SD == 0): 2623 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - LHA ******************* ## ## ## ******************* Start of - VMH ******************* ## ## VMH - LR vs MAL ## Did not run RIF -- Number of target genes: 1 ## ## VMH - LR vs LAL ## Number of target genes: 11 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: VMH_004__LR, VMH_022__LR, VMH_032__LR, VMH_079__LR, VMH_149__LR ## names of condition 2: VMH_052__LAL, VMH_112__LAL, VMH_136__LAL, VMH_184__LAL, VMH_193__LAL ## Number of excluded genes (within condition SD == 0): 2156 ## Running RIF... ## Running RIF... COMPLETE ## ## VMH - MAL vs LAL ## Number of target genes: 5 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: VMH_008__MAL, VMH_066__MAL, VMH_088__MAL, VMH_096__MAL, VMH_186__MAL ## names of condition 2: VMH_052__LAL, VMH_112__LAL, VMH_136__LAL, VMH_184__LAL, VMH_193__LAL ## Number of excluded genes (within condition SD == 0): 2188 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - VMH ******************* ## ## ## ******************* Start of - ABO ******************* ## ## ABO - LR vs MAL ## Number of target genes: 2 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ABO_004__LR, ABO_022__LR, ABO_032__LR, ABO_079__LR, ABO_149__LR ## names of condition 2: ABO_008__MAL, ABO_066__MAL, ABO_088__MAL, ABO_096__MAL, ABO_186__MAL ## Number of excluded genes (within condition SD == 0): 3352 ## Running RIF... ## Running RIF... COMPLETE ## ## ABO - LR vs LAL ## Number of target genes: 19 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ABO_004__LR, ABO_022__LR, ABO_032__LR, ABO_079__LR, ABO_149__LR ## names of condition 2: ABO_052__LAL, ABO_112__LAL, ABO_136__LAL, ABO_184__LAL, ABO_193__LAL ## Number of excluded genes (within condition SD == 0): 3206 ## Running RIF... ## Running RIF... COMPLETE ## ## ABO - MAL vs LAL ## Number of target genes: 21 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: ABO_008__MAL, ABO_066__MAL, ABO_088__MAL, ABO_096__MAL, ABO_186__MAL ## names of condition 2: ABO_052__LAL, ABO_112__LAL, ABO_136__LAL, ABO_184__LAL, ABO_193__LAL ## Number of excluded genes (within condition SD == 0): 3375 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - ABO ******************* ## ## ## ******************* Start of - DUO ******************* ## ## DUO - LR vs MAL ## Number of target genes: 789 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: DUO_004__LR, DUO_022__LR, DUO_032__LR, DUO_079__LR, DUO_149__LR ## names of condition 2: DUO_008__MAL, DUO_066__MAL, DUO_088__MAL, DUO_096__MAL, DUO_186__MAL ## Number of excluded genes (within condition SD == 0): 2520 ## Running RIF... ## Running RIF... COMPLETE ## ## DUO - LR vs LAL ## Number of target genes: 75 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: DUO_004__LR, DUO_022__LR, DUO_032__LR, DUO_079__LR, DUO_149__LR ## names of condition 2: DUO_052__LAL, DUO_112__LAL, DUO_136__LAL, DUO_184__LAL, DUO_193__LAL ## Number of excluded genes (within condition SD == 0): 2577 ## Running RIF... ## Running RIF... COMPLETE ## ## DUO - MAL vs LAL ## Number of target genes: 210 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: DUO_008__MAL, DUO_066__MAL, DUO_088__MAL, DUO_096__MAL, DUO_186__MAL ## names of condition 2: DUO_052__LAL, DUO_112__LAL, DUO_136__LAL, DUO_184__LAL, DUO_193__LAL ## Number of excluded genes (within condition SD == 0): 2571 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - DUO ******************* ## ## ## ******************* Start of - RUM ******************* ## ## RUM - LR vs MAL ## Number of target genes: 487 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: RUM_004__LR, RUM_022__LR, RUM_032__LR, RUM_079__LR, RUM_149__LR ## names of condition 2: RUM_008__MAL, RUM_066__MAL, RUM_088__MAL, RUM_096__MAL, RUM_186__MAL ## Number of excluded genes (within condition SD == 0): 3912 ## Running RIF... ## Running RIF... COMPLETE ## ## RUM - LR vs LAL ## Number of target genes: 43 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: RUM_004__LR, RUM_022__LR, RUM_032__LR, RUM_079__LR, RUM_149__LR ## names of condition 2: RUM_052__LAL, RUM_112__LAL, RUM_136__LAL, RUM_184__LAL, RUM_193__LAL ## Number of excluded genes (within condition SD == 0): 3799 ## Running RIF... ## Running RIF... COMPLETE ## ## RUM - MAL vs LAL ## Number of target genes: 360 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: RUM_008__MAL, RUM_066__MAL, RUM_088__MAL, RUM_096__MAL, RUM_186__MAL ## names of condition 2: RUM_052__LAL, RUM_112__LAL, RUM_136__LAL, RUM_184__LAL, RUM_193__LAL ## Number of excluded genes (within condition SD == 0): 3901 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - RUM ******************* ## ## ## ******************* Start of - LIV ******************* ## ## LIV - LR vs MAL ## Number of target genes: 62 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: LIV_004__LR, LIV_022__LR, LIV_032__LR, LIV_079__LR, LIV_149__LR ## names of condition 2: LIV_008__MAL, LIV_066__MAL, LIV_088__MAL, LIV_096__MAL, LIV_186__MAL ## Number of excluded genes (within condition SD == 0): 3399 ## Running RIF... ## Running RIF... COMPLETE ## ## LIV - LR vs LAL ## Number of target genes: 288 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: LIV_004__LR, LIV_022__LR, LIV_032__LR, LIV_079__LR, LIV_149__LR ## names of condition 2: LIV_052__LAL, LIV_112__LAL, LIV_136__LAL, LIV_184__LAL, LIV_193__LAL ## Number of excluded genes (within condition SD == 0): 3585 ## Running RIF... ## Running RIF... COMPLETE ## ## LIV - MAL vs LAL ## Number of target genes: 716 ## Number of TFs (or genes as TFS): 22258 ## names of condition 1: LIV_008__MAL, LIV_066__MAL, LIV_088__MAL, LIV_096__MAL, LIV_186__MAL ## names of condition 2: LIV_052__LAL, LIV_112__LAL, LIV_136__LAL, LIV_184__LAL, LIV_193__LAL ## Number of excluded genes (within condition SD == 0): 3541 ## Running RIF... ## Running RIF... COMPLETE ## ## ## ******************* End of - LIV ******************* "],["pcit.html", "Chapter 11 PCIT 11.1 Prepare data for PCIT analysis 11.2 Run PCIT Analysis 11.3 Filter PCIT output for Cytoscape 11.4 Viewing in Cytoscape", " Chapter 11 PCIT The Partial Correlation Information Theory (PCIT) co-expression analysis is a robust technique for determing biological meaningful correlations between genes across the variability within a dataset. 11.1 Prepare data for PCIT analysis It is prohibitive to run PCIT on all possible genes, are largely unmeaningful. Instead, the first step in this analysis filters each set of data to include a list of genes that are most likely to be meaningful in a co-expression analysis. Three possible data types can be included: DE, PIF and RIF. For each, the function will use user-defined thresholds to make selections for each pairwise comparison. In this example a small number has been selected to keep the computational load to a minimum. In reality, larger DEn, PIFn and RIFn values might be used. This function will output a venn plot which is helpful to see how many genes from each catagory were selected. It will also output metadata which is useful for visualisation in cytoscape. vst_norm_data &lt;- GET_normalised_data(full_norm, vst_or_log2 = &quot;VST&quot;)[[1]] selected_for_PCIT &lt;- PCIT_prepare_data(data_type_selection = c(&quot;DE&quot;, &quot;PIF&quot;, &quot;RIF&quot;), norm_exp_data = vst_norm_data, gene_annotations = gene_annot, DE_full_out = DE_out, RIF_output_data = RIF_output, search_top_level = NULL, filter_norm_data_columns = TRUE, DEn = 20 , PIF_sig = 2.58, PIFn = 10, RIF_sig = 2.58, RIFn = 10, export_tables = TRUE, export_venn_plot = TRUE, export_dir = &quot;./outputs/PCIT/&quot;) ## Number of selected genes within dataset: 771 ## Number of samples within dataset: 105 ## Directory created: ./outputs/PCIT/ 11.2 Run PCIT Analysis This step may take a while, and it may look like R is not doing anything as it is implemented in C in the background. If you have access to the windows exectuable fortran program it would likely be quicker to use that instead. This function will output a list of tables with different calculated values. PCIT_norm_counts &lt;- selected_for_PCIT$PCIT_normalised_counts PCIT_out &lt;- PCIT_calculate(norm_counts_for_PCIT = PCIT_norm_counts, key_colname = &quot;gene_name&quot;) ## Removing rows with duplicated rownames: U6, U6, LYZ1, U6, ITLN2 #Check output table PCIT_out$tab %&gt;% head() ## gene1 gene2 corr1 corr2 ## 1 5_8S_rRNA ITLN2 0.13753 0 ## 2 5_8S_rRNA ENSBTAG00000048770 -0.17807 0 ## 3 5_8S_rRNA ENSBTAG00000048794 0.12162 0 ## 4 5_8S_rRNA ENSBTAG00000048804 -0.13235 0 ## 5 5_8S_rRNA ENSBTAG00000048850 -0.10011 0 ## 6 5_8S_rRNA ENSBTAG00000048871 0.24243 0 11.3 Filter PCIT output for Cytoscape The output from the PCIT function is not filtered and is also not in a format compatible with Cytoscape software. The PCIT_filter_output() function handles this. It is not always known what the best threshold will be for visualisation, and this step is likely to be done multiple times in practice. This function will output the required files for visualisation in Cytoscape. PCIT_filter_output(PCIT_out_data = PCIT_out, cor_threshold = 0.8, export_dir = &quot;./outputs/PCIT/&quot;) ## Registered S3 method overwritten by &#39;GGally&#39;: ## method from ## +.gg ggplot2 ## ## Registered S3 method overwritten by &#39;ggnetwork&#39;: ## method from ## fortify.igraph ggtree ## number of nodes: ## 498 ## ./outputs/PCIT/ Directory exists ## Exported data to : ./outputs/PCIT/PCIT_FILTERED_0.8_20220106_2259.txt ## Creating summary density plots... PCIT_filter_output(PCIT_out_data = PCIT_out, cor_threshold = 0.9, export_dir = &quot;./outputs/PCIT/&quot;) ## number of nodes: ## 264 ## ./outputs/PCIT/ Directory exists ## Exported data to : ./outputs/PCIT/PCIT_FILTERED_0.9_20220106_2259.txt ## Creating summary density plots... 11.4 Viewing in Cytoscape Firstly, go to https://cytoscape.org/download.html and download Cytoscape. There is also plenty of help files on their website, but a brief overview is included here. The exported file from the PCIT_filter_output function will look something like: PCIT_FILTERED_0.8_20220106_0914.txt. This file is formatted appropriately for Cytoscape to import it easily. 11.4.1 Import PCIT output to cytoscape To import the file: Figure 11.1: Select File -&gt; Import -&gt; Network from File Figure 11.2: Select the required PCIT_filtered_ file and Open it Figure 11.3: Make sure the first column is a green circle and the second column is the orange circular symbol. Click OK. Once this is done you should see a display of the network being built. 11.4.2 Import metadata for genes It is also helpful to include more information about the genes in Cytoscape to help with interpretation. One way is to do the following: Figure 11.4: Select File -&gt; Import -&gt; Table from File Figure 11.5: Select the genes_summary file Figure 11.6: Change the key to match thekey_colname =  value from PCIT function, in this case it is the gene_name column. Click on column heading to change. 11.4.3 Further Details Further help is available in the manual: http://manual.cytoscape.org/en/stable/ "],["plot-genes-of-interest.html", "Chapter 12 Plot genes of interest", " Chapter 12 Plot genes of interest Sometimes it is useful to view boxplots of the expression of a gene for all individual samples. This function allows genes of interest to be plotted in detail. Multiple names can be provided. The names of the genes are groups_for_DE &lt;- seq_data$Tissue_Region %&gt;% unique() DE4Rumi::plot_genes_of_interest(norm_exp_data = vst_norm_data, DE_full_out = DE_out, se_data = seq_data, gene_annotations = gene_annot, selected_genes = c(&quot;AGRP&quot;, &quot;IGF1&quot;), top_level_colname = Tissue_Region, sample_colname = sample_names, results_contrast_factor = Treatment, top_level_groups = groups_for_DE, plot_groups_colname = Treatment, max_genes_per_plot = 3, x_label = &quot;Treatment&quot;, p_thresh = 0.05) ## Joining, by = &quot;sample_names&quot; ## Joining, by = &quot;Treatment&quot; ## Joining, by = &quot;Treatment&quot; ## Joining, by = c(&quot;gene_name&quot;, &quot;top_level&quot;) ## Joining, by = c(&quot;gene_name&quot;, &quot;top_level&quot;) ## $`1` "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
